import random
import numpy as np
import pygame
# Initialize pygame
pygame.init()

# Set up clock for controlling frame rate
clock = pygame.time.Clock()

# Define colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
YELLOW = (255, 255, 0)
BACKGROUND_COLOR = (247, 209, 139)
SIDEBAR_COLOR = (88, 88, 88)

# Set screen dimensions
SCREEN_WIDTH = 900
SCREEN_HEIGHT = 900
SIDEBAR_WIDTH = 100  # Width of the sidebar
GAME_AREA_WIDTH = SCREEN_WIDTH - SIDEBAR_WIDTH  # Width of the game area

# Simulation parameters
NUM_PREY = 50
NUM_PREDATORS = 20
FOOD_AMOUNT = 750
FOOD_RADIUS = 5
PREY_SPEED = 5
PREDATOR_SPEED = 6

# Other constants
RTH = 1


class Prey(pygame.sprite.Sprite):
    def __init__(self, environment):
        super().__init__()
        self.environment = environment
        self.image = pygame.Surface((8, 8))
        self.image.fill(GREEN)
        self.rect = self.image.get_rect()
        self.rect.center = (
            random.randint(0, self.environment.game_area_width),
            random.randint(0, self.environment.screen_height)
        )
        self.speed_x = random.choice([PREY_SPEED, -PREY_SPEED])
        self.speed_y = random.choice([PREY_SPEED, -PREY_SPEED])
        self.hp = random.randint(13, 26)
        self.posReward = 3
        self.negReward = -10

    def update(self, action):
        reward, collected = 0, 0

        # Movement
        if action == 0:  # Move up
            self.rect.y -= self.speed_y
        elif action == 1:  # Move down
            self.rect.y += self.speed_y
        elif action == 2:  # Move right
            self.rect.x += self.speed_x
        elif action == 3:  # Move left
            self.rect.x -= self.speed_x

        # Screen boundaries
        if self.rect.left <= 0 or self.rect.right >= self.environment.game_area_width:
            self.speed_x = -self.speed_x
        if self.rect.top <= 0 or self.rect.bottom >= self.environment.screen_height:
            self.speed_y = -self.speed_y

        # Collision detection
        if pygame.sprite.spritecollideany(self, self.environment.food_group):
            reward = self.posReward
            collected += 1
            self.hp += 1  # Eating food restores HP

        if pygame.sprite.spritecollideany(self, self.environment.predator_group):
            reward = self.negReward
            self.environment.prey_group.remove(self)
            self.environment.all_sprites.remove(self)

        return reward, collected


class Predator(pygame.sprite.Sprite):
    def __init__(self, environment):
        super().__init__()
        self.environment = environment
        self.image = pygame.Surface((10, 10))
        self.image.fill(RED)
        self.rect = self.image.get_rect()
        self.rect.center = (
            random.randint(0, self.environment.game_area_width),
            random.randint(0, self.environment.screen_height)
        )
        self.speed_x = random.choice([PREDATOR_SPEED, -PREDATOR_SPEED])
        self.speed_y = random.choice([PREDATOR_SPEED, -PREDATOR_SPEED])
        self.hp = random.randint(14, 28)
        self.posReward = 3
        self.negReward = -10
        self.defReward = -0.03

    def update(self, action):
        reward, collected = 0, 0

        # Movement
        if action == 0:  # Move up
            self.rect.y -= self.speed_y
        elif action == 1:  # Move down
            self.rect.y += self.speed_y
        elif action == 2:  # Move right
            self.rect.x += self.speed_x
        elif action == 3:  # Move left
            self.rect.x -= self.speed_x

        # Screen boundaries
        if self.rect.left <= 0 or self.rect.right >= self.environment.game_area_width:
            self.speed_x = -self.speed_x
        if self.rect.top <= 0 or self.rect.bottom >= self.environment.screen_height:
            self.speed_y = -self.speed_y

        # Collision detection
        if pygame.sprite.spritecollideany(self, self.environment.prey_group):
            reward = self.posReward
            collected += 1
            self.hp += 3  # Eating prey restores HP

        if self.hp <= 0:
            reward = self.negReward
            self.environment.predator_group.remove(self)
            self.environment.all_sprites.remove(self)

        return reward, collected


class Food(pygame.sprite.Sprite):
    def __init__(self, environment):
        super().__init__()
        self.environment = environment
        self.image = pygame.Surface((4, 4))
        self.image.fill(YELLOW)
        self.rect = self.image.get_rect()
        self.rect.center = (
            random.randint(0, self.environment.game_area_width),
            random.randint(0, self.environment.screen_height)
        )

    def update(self):
        if pygame.sprite.spritecollideany(self, self.environment.prey_group):
            self.environment.food_group.remove(self)
            self.environment.all_sprites.remove(self)


class Environment:
    def __init__(self):
        self.screen_width = SCREEN_WIDTH
        self.screen_height = SCREEN_HEIGHT
        self.game_area_width = GAME_AREA_WIDTH
        self.all_sprites = pygame.sprite.Group()
        self.prey_group = pygame.sprite.Group()
        self.predator_group = pygame.sprite.Group()
        self.food_group = pygame.sprite.Group()
        pygame.time.set_timer(pygame.USEREVENT, 1000)
        self.screenMap = np.zeros((self.screen_width, self.screen_height),dtype=np.int8)
        self.reset()
        self.backgroundcolor = BACKGROUND_COLOR
        # Add variables to track last HP update time
        self.last_hp_update_time = pygame.time.get_ticks()

    def reset(self):
        self.all_sprites.empty()
        self.prey_group.empty()
        self.predator_group.empty()
        self.food_group.empty()

        for _ in range(NUM_PREY):
            prey = Prey(self)
            self.all_sprites.add(prey)
            self.prey_group.add(prey)

        for _ in range(FOOD_AMOUNT):
            food = Food(self)
            self.all_sprites.add(food)
            self.food_group.add(food)

        for _ in range(NUM_PREDATORS):
            predator = Predator(self)
            self.all_sprites.add(predator)
            self.predator_group.add(predator)

    def update_hp(self):
        current_time = pygame.time.get_ticks()
        if current_time - self.last_hp_update_time >= 4000:  # 4 seconds
            for predator in self.predator_group:
                predator.hp -= 2

                if predator.hp <= 0:
                    self.predator_group.remove(predator)
                    self.all_sprites.remove(predator)
            for prey in self.prey_group:
                prey.hp -= 3
                if prey.hp <= 0:
                    self.prey_group.remove(prey)
                    self.all_sprites.remove(prey)
            self.last_hp_update_time = current_time
    def update_screen_map(self):
        # Clear the screen map
        self.screenMap.fill(0)
        
        # Function to update the position in screenMap
        def update_position(x, y, value):
            if 0 <= x < self.game_area_width and 0 <= y < self.screen_height:  # Check boundaries
                self.screenMap[x, y] = value

        # Update food positions
        for food in self.food_group:
            x, y = food.rect.topleft
            update_position(x, y, 1)

        # Update prey positions
        for prey in self.prey_group:
            x, y = prey.rect.topleft
            update_position(x, y, 2)

        # Update predator positions
        for predator in self.predator_group:
            x, y = predator.rect.topleft
            update_position(x, y, 3)

        return self.screenMap
    def update_predator_food(self, action):
        self.update_hp()

        game_over = 0
        reward = 0  # Initialize reward variable
        collected = 0  # Initialize collected variable

        for predator in self.predator_group:
            # Unpack the values from the update method correctly
            predator_reward, predator_collected = predator.update(action)
            reward += predator_reward  # Accumulate rewards
            collected += predator_collected  # Accumulate collected items

        for food in self.food_group:
            food.update()

        if len(self.prey_group) == 0 or len(self.predator_group) == 0:
            game_over = 1
        return game_over, reward, collected, self.screenMap

    def update_prey(self, action):
        self.update_hp()
        reward = 0
        collected_food = 0
        for prey in self.prey_group:
            prey_reward, prey_collected = prey.update(action)
            reward += prey_reward
            collected_food += prey_collected
        return reward, collected_food


def main():
    screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
    pygame.display.set_caption("Savannah Simulation")

    environment = Environment()

    font = pygame.font.Font(None, 36)

    # Create a sidebar surface
    sidebar_surface = pygame.Surface((SIDEBAR_WIDTH, SCREEN_HEIGHT))
    sidebar_surface.fill(SIDEBAR_COLOR)

    running = True

    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.USEREVENT:
                for prey in environment.prey_group:
                    prey.hp -= 1
                    if prey.hp <= 0:
                        environment.prey_group.remove(prey)
                        environment.all_sprites.remove(prey)
                for predator in environment.predator_group:
                    predator.hp -= 1
                    if predator.hp <= 0:
                        environment.predator_group.remove(predator)
                        environment.all_sprites.remove(predator)

        game_over = environment.update_predator_food(action=1)
        if game_over == 1:
            print("Game Over")
            environment.reset()

        prey_count = len(environment.prey_group)
        predator_count = len(environment.predator_group)

        # Clear the sidebar surface
        sidebar_surface.fill(SIDEBAR_COLOR)

        prey_text = font.render("Prey: {}".format(prey_count), True, WHITE)
        predator_text = font.render("Predators: {}".format(predator_count), True, WHITE)

        prey_rect = prey_text.get_rect()
        prey_rect.topleft = (10, 10)

        predator_rect = predator_text.get_rect()
        predator_rect.topleft = (10, 60)

        screen.fill(BACKGROUND_COLOR)  # Fill the screen with the background color
        environment.all_sprites.draw(screen)

        # Blit the text surfaces onto the sidebar surface
        sidebar_surface.blit(prey_text, prey_rect)
        sidebar_surface.blit(predator_text, predator_rect)

        # Blit the sidebar onto the screen
        screen.blit(sidebar_surface, (GAME_AREA_WIDTH, 0))

        pygame.draw.line(screen, BLACK, (GAME_AREA_WIDTH, 0), (GAME_AREA_WIDTH, SCREEN_HEIGHT), 3)
        pygame.display.flip()
        clock.tick(60)  # Limit the frame rate to 60 FPS

    pygame.quit()


if __name__ == '__main__':
    main()
