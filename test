# Importowanie bibliotek
from environment import Environment
from brain import Brain
import numpy as np
import pygame
pygame.init()

# Definiowanie parametrów
nLastStates = 2
filepathToOpen = 'model2.h5'
filepathToOpen_prey = 'model3.h5'

# Tworzenie obiektów Environment oraz Brain
env = Environment()
brain = Brain((env.screen_width, env.screen_height, nLastStates))
model = brain.load_model(filepathToOpen)
brain_prey = Brain((env.screen_width, env.screen_height, nLastStates))
model_prey = brain_prey.load_model(filepathToOpen_prey)

# Initialize the Pygame screen
screen = pygame.display.set_mode((env.screen_width, env.screen_height))
pygame.display.set_caption("Savannah Simulation")

# Utworzenie funkcji, która zresetuje stan gry
def resetStates():
    currentState = np.zeros((1, env.screen_width, env.screen_height, nLastStates))
    for i in range(nLastStates):
        currentState[:, :, :, i] = env.screenMap
    return currentState, currentState

# Uruchomienie głównej pętli
while True:
    # Handle Pygame events to prevent the window from becoming unresponsive
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            exit()

    # Resetowanie gry i stanów gry
    env.reset()
    currentState, nextState = resetStates()
    gameOver = False

    # Gra
    while not gameOver:
        # Handle Pygame events within the game loop as well
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                exit()

        # Wybór akcji do wykonania
        screen.fill(env.backgroundcolor)  # Fill the screen with the background color
        env.all_sprites.draw(screen)      # Draw all sprites

        qvalues = model.predict(currentState)[0]
        action = np.argmax(qvalues)
        qvalue_prey = model_prey.predict(currentState)[0]
        action_prey = np.argmax(qvalue_prey)

        # Aktualizacja środowiska
        gameOver, _, _, state = env.update_predator_food(action)
        _, _ = env.update_prey(action_prey)

        # Dodanie nowej klatki gry do następnego stanu i usunięcie najstarszej
        state = np.reshape(state, (1, env.screen_width, env.screen_height, 1))
        nextState = np.append(nextState, state, axis=3)
        nextState = np.delete(nextState, 0, axis=3)

        # Aktualizacja obecnego stanu
        currentState = nextState

        # Update the display
        pygame.display.flip()
